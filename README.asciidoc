= debugtrace-js

link:README_ja.asciidoc[[Japanese]]

*debugtrace-js* is a library that outputs trace logs when debugging JavaScript programs. It is available on Node.js 10 or later. +
By embedding `debugtrace.enter()` and `debugtrace.leave()` at the start and end of functions, you can output the execution status of the JavaScript program under development to the log.

=== 1. Features

* Automatically outputs invoker's function name, source file and line number.
* Automatically indents the log with nesting methods and objects.
* There are no dependent libraries at run time.

=== 2. How to use

Do the following for debug target and related methods.

. Insert `debugtrace.enter()` at the beginning of functions.
. Insert `debugtrace.leave()` at the end of functions or just before the `return` statement.
. Insert `debugtrace.print('foo', foo)` to output arguments, local variables and return value to the log if necessary.

The following is an example of JavaScript source used debugtrace-js methods and the log of when it has been executed.

[source,javascript]
.ReadmeExample.js
----
// ReadmeExample.js
const debugtrace = require('debugtrace') // for Debugging

class Contact {
    constructor(id, firstName, lastName, birthday) {
        this.id = id
        this.firstName = firstName
        this.lastName = lastName
        this.birthday = birthday
    }
}

function func2() {
    debugtrace.enter() // for Debugging
    let contacts = [
        new Contact(1, "Akane" , "Apple", new Date(Date.UTC(1991, 2, 3))),
        new Contact(2, "Yukari", "Apple", new Date(Date.UTC(1992, 3, 4)))
    ]
    debugtrace.print("contacts", contacts) // for Debugging
    debugtrace.leave() // for Debugging
}

function func1() {
    debugtrace.enter() // for Debugging
    func2()
    debugtrace.leave() // for Debugging
}

func1()
----

.debugtrace.log
----
2020-07-26 14:55:32.448+09:00 debugtrace 2.0.0
2020-07-26 14:55:32.463+09:00
2020-07-26 14:55:32.464+09:00 Enter func1 (ReadmeExample.js:24)
2020-07-26 14:55:32.465+09:00 | Enter func2 (ReadmeExample.js:14)
2020-07-26 14:55:32.466+09:00 | | contacts = [
2020-07-26 14:55:32.467+09:00 | |   (Contact){
2020-07-26 14:55:32.467+09:00 | |     id: 1, firstName: (length:5)'Akane', lastName: (length:5)'Apple',
2020-07-26 14:55:32.467+09:00 | |     birthday: 1991-03-03 09:00:00.000+09:00
2020-07-26 14:55:32.467+09:00 | |   },
2020-07-26 14:55:32.467+09:00 | |   (Contact){
2020-07-26 14:55:32.467+09:00 | |     id: 2, firstName: (length:6)'Yukari', lastName: (length:5)'Apple',
2020-07-26 14:55:32.468+09:00 | |     birthday: 1992-04-04 09:00:00.000+09:00
2020-07-26 14:55:32.468+09:00 | |   }
2020-07-26 14:55:32.468+09:00 | | ] (ReadmeExample.js:19)
2020-07-26 14:55:32.469+09:00 | Leave func2 (ReadmeExample.js:20) duration: 00:00:00.003
2020-07-26 14:55:32.469+09:00 Leave func1 (ReadmeExample.js:26) duration: 00:00:00.005
----

=== 3. Function List

This library has the following methods. These have no return value.

[options="header"]
.Function List
|===
|Function Name|Arguments|Description
|`enter`
|_None_
|Outputs function start to log.

|`leave`
|_None_
|Outputs method end to log.

|`printMessage`
|`message`: the message
|Outputs the message to log.

|`print`
|`name`: the value name +
`value`: the value
|Outputs to the log in the form of +
`name = value`

|===

=== 4. Properties of *debugtrace*

The following properties can be specified for on debugtrace.

[options="header", cols="2,8"]
.debugtrace.properties
|===
|Property Name|Description
|`formatEnter`
|The format function of the log output when entering functions +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.formatEnter = (name, fileName, lineNumber) =&#x3e;` +
&#xa0;&#xa0; &#xa0;&#xa0; `&#96;Enter ${name} (${fileName}:${lineNumber})&#96;` [.small .blue]#*[Initial setting]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `name`: The function name +
&#xa0;&#xa0; `fileName`:  The file name +
&#xa0;&#xa0; `lineNumber`: The line number

|`formatLeave`
|The format function of the log output when leaving functions +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.formatLeave = (name, fileName, lineNumber, duration) =&#x3e;` +
&#xa0;&#xa0; &#xa0;&#xa0; `&#96;Leave ${name} (${fileName}:${lineNumber}) duration: ${duration}&#96;`  [.small .blue]#*[Initial setting]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `name`: the function name +
&#xa0;&#xa0; `fileName`: the file name +
&#xa0;&#xa0; `lineNumber`: the line number +
&#xa0;&#xa0; `duration`: the duration since invoking the corresponding `enter` function

|`indentString`
|The indentation string for code +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.indentString = '&#x7c; '` [.small .blue]#*[Initial setting]*#

|`dataIndentString`
|The indentation string for data +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.dataIndentString = '  '` [.small .blue]#*[Initial setting]*#

|`limitString`
|The string to represent that it has exceeded the limit +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.limitString = '\...'` [.small .blue]#*[Initial setting]*#

|`cyclicReferenceString`
|The string to represent that the cyclic reference occurs +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.cyclicReferenceString = '&#x2A;&#x2A;&#x2A; cyclic reference &#x2A;&#x2A;&#x2A;'` [.small .blue]#*[Initial setting]*# +

|`varNameValueSeparator`
|The separator string between the variable name and value +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.varNameValueSeparator = ' = '` [.small .blue]#*[Initial setting]*# +

|`keyValueSeparator`
|The separator string between the key and value of Map object +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.keyValueSeparator = ': '` [.small .blue]#*[Initial setting]*# +

|`formatPrintSuffix`
|The format function for string added by the `print` function
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.formatPrintSuffix = (name, fileName, lineNumber) =&#x3e;` +
&#xa0;&#xa0;&#xa0;&#xa0; `&#96; (${fileName}:${lineNumber})&#96;` [.small .blue]#*[Initial setting]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `name`: the function name [.small .maroon]#_(Not used by default)_# +
&#xa0;&#xa0; `fileName`: the file name +
&#xa0;&#xa0; `lineNumber`: the line number

|`formatLength`
|The format function for array and string length +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.formatLength = length =&#x3e; &#96;length:${length}&#96;` [.small .blue]#*[Initial setting]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `length`: number of elements or string length

|`formatSize`
|The format function for `Map` and `Set` +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.formatSize = size =&#x3e; &#96;size:${size}&#96;` [.small .blue]#*[Initial setting]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `size`: number of elements

|`minimumOutputLengthAndSize`
|The minimum value to output the number of elements of array, `Map` and `Set` +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.minimumOutputLengthAndSize = 5` [.small .blue]#*[Initial setting]*#

|`minimumOutputStringLength`
|The minimum value to output the length of string +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.minimumOutputStringLength = 5` [.small .blue]#*[Initial setting]*#

|`formatDate`
|The format function for `Date` +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.formatDate = date =&#x3e; {` +
&#xa0;&#xa0;&#xa0;&#xa0; `let timezoneOffset = date.getTimezoneOffset()` +
&#xa0;&#xa0;&#xa0;&#xa0; `const offsetSign = timezoneOffset < 0 ? &#x27;+&#x27; : &#x27;-&#x27;` +
&#xa0;&#xa0;&#xa0;&#xa0; `if (timezoneOffset < 0)` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `timezoneOffset = -timezoneOffset` +
&#xa0;&#xa0;&#xa0;&#xa0; `const str =&#xa0;date.getFullYear() + &#x27;-&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;&#xa0;+ (date.getMonth&#xa0;() + 1 )).slice(-2) + &#x27;-&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;&#xa0;+&#xa0;date.getDate&#xa0; ()&#xa0;&#xa0;&#xa0;).slice(-2) + &#x27; &#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;&#xa0;+&#xa0;date.getHours&#xa0;()&#xa0;&#xa0;&#xa0;).slice(-2) + &#x27;:&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;&#xa0;+&#xa0;date.getMinutes()&#xa0;&#xa0;&#xa0;).slice(-2) + &#x27;:&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;&#xa0;+&#xa0;date.getSeconds()&#xa0;&#xa0;&#xa0;).slice(-2) + &#x27;.&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;00&#x27; +&#xa0;date.getMilliseconds() ).slice(-3) + offsetSign +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;&#xa0;+&#xa0;Math.floor(timezoneOffset / 60)).slice(-2) + &#x27;:&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;&#xa0;+&#xa0;timezoneOffset % 60).slice(-2)` +
&#xa0;&#xa0;&#xa0;&#xa0; `return str` +
&#xa0;&#xa0; `}` [.small .blue]#*[Initial setting]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `date`: a `Date`

|`formatTime`
|The format function for `duration` of `formatLeave` +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.formatTime = date =&#x3e;` +
&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;  +  date.getUTCHours  ()     ).slice(-2) + &#x27;:&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;  +  date.getUTCMinutes()     ).slice(-2) + &#x27;:&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;0&#x27;  +  date.getUTCSeconds()     ).slice(-2) + &#x27;.&#x27; +` +
&#xa0;&#xa0;&#xa0;&#xa0; `(&#x27;00&#x27; +  date.getUTCMilliseconds()).slice(-3)` [.small .blue]#*[Initial setting]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `date`: a duration

|`formatLogDate`
|The format function for the log date and time +
[.small]#*Example:*# +
&#xa0;&#xa0; [.small]#_See_# `formatDate` +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `date`:  a log `Date`

|`maximumDataOutputWidth`
|The minimum value to output the length of string +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.maximumDataOutputWidth = 70` [.small .blue]#*[Initial setting]*#

|`collectionLimit`
|The limit value of elements for array, `Map` and `Set` to output +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.collectionLimit = 512` [.small .blue]#*[Initial setting]*#

|`stringLimit`
|The limit value of characters for string to output +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.stringLimit = 8192` [.small .blue]#*[Initial setting]*#

|`reflectionNestLimit`
|The limit value for reflection nesting +
[.small]#*Example:*# +
&#xa0;&#xa0; `debugtrace.reflectionNestLimit = 4` [.small .blue]#*[Initial setting]*#

|===

=== 5. License

link:LICENSE.txt[The MIT License (MIT)]

_(C) 2015 Masato Kokubo_

=== 6. Release Notes

==== debugtrace-js 2.0.0 [.small .gray]#- August 2, 2020#

* Supported Node.js 10 or later
* Improved the line break handling of data output
